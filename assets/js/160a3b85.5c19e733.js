"use strict";(self.webpackChunkflecks_docusaurus=self.webpackChunkflecks_docusaurus||[]).push([[6128],{3987:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>c,toc:()=>a});var r=s(5893),i=s(1151);const t={title:"Ordering",description:"Hint at and explicitly control the order in which things occur."},o="Ordering",c={id:"ordering",title:"Ordering",description:"Hint at and explicitly control the order in which things occur.",source:"@site/docs/ordering.mdx",sourceDirName:".",slug:"/ordering",permalink:"/flecks/docs/ordering",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Ordering",description:"Hint at and explicitly control the order in which things occur."},sidebar:"flecksSidebar",previous:{title:"Gathering and Providing",permalink:"/flecks/docs/gathering"},next:{title:"Platforms",permalink:"/flecks/docs/platforms"}},l={},a=[{value:"Ellipses/elision",id:"ellipseselision",level:2},{value:"<code>Flecks.priority</code>",id:"fleckspriority",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"ordering",children:"Ordering"}),"\n",(0,r.jsx)(n.p,{children:"Suppose we are composing an application and we have HTTP session state using cookies. When a\nuser hits a route, we need to load their session and subsequently read a value from said session\nto determine if the user prefers dark mode. Clearly, we will have to ensure that the session\nreification happens first. Enter hook ordering!"}),"\n",(0,r.jsxs)(n.p,{children:["Flecks uses the name of the hook as a configuration key in order to determine the ordering of a\nhook. Let's take a core hook as an example, ",(0,r.jsx)(n.code,{children:"@flecks/http/server.request.route"}),":"]}),"\n",(0,r.jsxs)(n.p,{children:["Our ",(0,r.jsx)(n.code,{children:"flecks.yml"})," could be configured like so:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"'@flecks/http/server':\n  'request.route':\n    - '@flecks/session'\n    - '@my-app/dark-mode-check'\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In this application, when ",(0,r.jsx)(n.code,{children:"@flecks/http/server.request.route"})," is invoked, ",(0,r.jsx)(n.code,{children:"@flecks/session"}),"'s\nimplementation is invoked (which reifies the user's session from cookies), followed by\n",(0,r.jsx)(n.code,{children:"@my-app/dark-mode-check"}),"'s."]}),"\n",(0,r.jsx)(n.h2,{id:"ellipseselision",children:"Ellipses/elision"}),"\n",(0,r.jsx)(n.p,{children:"It is not always ergonomic to configure the order of every single implementation, but enough to\nspecify which implementations must run first (or last)."}),"\n",(0,r.jsx)(n.p,{children:"For example, suppose we have multiple implementations that require there to have been a reified\nuser session, but which order those implementations run might not be a concern. For this, flecks\nprovides you with the ellipses entry:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"'@flecks/http/server':\n  'request.route':\n    - '@flecks/session'\n    - '...'\n    - '@my-app/finalize'\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In this application, we first reify the user session as before, but instead of listing\n",(0,r.jsx)(n.code,{children:"@my-app/dark-mode-check"})," immediately after, we specify ellipses. After the ellipses we specify\n",(0,r.jsx)(n.code,{children:"@my-app/finalize"})," to do some finalization work."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"'...'"}),' essentially translates to: "every implementing fleck which has not already been explicitly\nlisted in the ordering configuration" which is the default ordering configuration for a hook.']}),"\n",(0,r.jsx)(n.p,{children:"Using more than one ellipses entry in an ordering configuration is ambiguous and will throw an\nerror."}),"\n",(0,r.jsx)(n.h2,{id:"fleckspriority",children:(0,r.jsx)(n.code,{children:"Flecks.priority"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"@my-app/dark-mode-check"}),"'s implementation of ",(0,r.jsx)(n.code,{children:"@flecks/http/server.request.route"})," will always need\nto run after the user session server implementation runs. We can remove the need to configure\nthis manually by configuring the priority of our hook implementation."]}),"\n",(0,r.jsx)(n.p,{children:"If this is our dark mode checker:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"export const hooks = {\n  '@flecks/http/server.request.route': (flecks) => (req, res, next) => {\n    if (req.session.prefersDarkMode) {\n      // ...\n    }\n  },\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Then this is the same implementation but configured to run after ",(0,r.jsx)(n.code,{children:"@flecks/session/server"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"export const hooks = {\n  '@flecks/http/server.request.route': Flecks.priority(\n    (flecks) => (req, res, next) => {\n      if (req.session.prefersDarkMode) {\n        // ...\n      }\n    },\n    {after: '@flecks/session/server'},\n  ),\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>c,a:()=>o});var r=s(7294);const i={},t=r.createContext(i);function o(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);