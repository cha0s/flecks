"use strict";(self.webpackChunkflecks_docusaurus=self.webpackChunkflecks_docusaurus||[]).push([[9091],{2127:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>d,default:()=>f,frontMatter:()=>c,metadata:()=>h,toc:()=>p});var s=t(5893),a=t(1151),r=t(3200),l=t(4283),i=t(385),o=t(6569);const c={title:"Database",description:"Define models and connect to a database."},d="Database",h={id:"database",title:"Database",description:"Define models and connect to a database.",source:"@site/docs/database.mdx",sourceDirName:".",slug:"/database",permalink:"/flecks/docs/database",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Database",description:"Define models and connect to a database."},sidebar:"flecksSidebar",previous:{title:"Environment Variables",permalink:"/flecks/docs/environment"},next:{title:"Docker",permalink:"/flecks/docs/docker"}},u={},p=[{value:"Install and configure",id:"install-and-configure",level:2},{value:"Your models",id:"your-models",level:2},{value:"Providing models with <code>Flecks.provide()</code>",id:"providing-models-with-flecksprovide",level:2},{value:"Working with models",id:"working-with-models",level:2},{value:"Persistence",id:"persistence",level:2},{value:"Containerization",id:"containerization",level:2},{value:"Production",id:"production",level:2}];function g(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"database",children:"Database"}),"\n",(0,s.jsxs)(n.p,{children:["flecks provides database connection through ",(0,s.jsx)(n.a,{href:"https://sequelize.org/",children:"Sequelize"})," and database\nserver instances through either flat SQLite databases or ",(0,s.jsx)(n.a,{href:"https://www.docker.com/",children:"Docker"}),"-ized\ndatabase servers."]}),"\n",(0,s.jsx)(n.h2,{id:"install-and-configure",children:"Install and configure"}),"\n",(0,s.jsx)(n.p,{children:"We'll start from scratch as an example. Create a new flecks application:"}),"\n",(0,s.jsx)(r.Z,{pkg:"db-test",type:"app"}),"\n",(0,s.jsxs)(n.p,{children:["Now in your new application directory, add ",(0,s.jsx)(n.code,{children:"@flecks/db"}),":"]}),"\n",(0,s.jsx)(l.Z,{headless:!0,cmd:"flecks add @flecks/db"}),"\n",(0,s.jsx)(n.p,{children:"Finally,"}),"\n",(0,s.jsx)(o.Z,{headless:!0,cmd:"start"}),"\n",(0,s.jsx)(n.p,{children:"You will see lines like the following in the logs:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"  @flecks/db/server/connection config: { dialect: 'sqlite', storage: ':memory:' } +0ms\n  @flecks/db/server/connection synchronizing... +107ms\n  @flecks/db/server/connection synchronized +2ms\n"})}),"\n",(0,s.jsxs)(n.p,{children:["By default, flecks will connect to an ",(0,s.jsx)(n.strong,{children:"in-memory"})," SQLite database to get you started instantly."]}),"\n",(0,s.jsx)(n.h2,{id:"your-models",children:"Your models"}),"\n",(0,s.jsx)(n.p,{children:"Astute observers may have noticed a line preceding the ones earlier:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"  @flecks/core/flecks gathered '@flecks/db.models': [] +0ms\n"})}),"\n",(0,s.jsx)(n.p,{children:"Let's create a fleck that makes a model so we can get a feel for how it works."}),"\n",(0,s.jsx)(n.p,{children:"First, create a fleck in your application:"}),"\n",(0,s.jsx)(r.Z,{pkg:"packages/content",type:"fleck"}),"\n",(0,s.jsxs)(n.p,{children:["Now, let's hop into ",(0,s.jsx)(n.code,{children:"packages/content/src/index.js"})," and add a hook implementation:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",metastring:'title="packages/content/src/index.js"',children:"export const hooks = {\n  '@flecks/db.models': (flecks) => {\n    const {Model, Types} = flecks.fleck('@flecks/db/server');\n    class Content extends Model {\n\n      static get attributes() {\n        return {\n          text: {\n            type: Types.TEXT,\n            allowNull: false,\n          },\n        };\n      }\n\n    }\n    return {\n      Content,\n    };\n  },\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:"Save the file and the server will immediately restart. You will see that line looks different now:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"  @flecks/core/flecks gathered '@flecks/db.models': [ 'Content' ] +0ms\n"})}),"\n",(0,s.jsx)(n.p,{children:"Our model is recognized!"}),"\n",(0,s.jsx)(n.p,{children:"Let's add one more model and create an association between them:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",metastring:'title="packages/content/src/index.js"',children:"export const hooks = {\n  '@flecks/db.models': (flecks) => {\n    const {Model, Types} = flecks.fleck('@flecks/db/server');\n    class Content extends Model {\n\n      static get attributes() {\n        return {\n          text: {\n            type: Types.TEXT,\n            allowNull: false,\n          },\n        };\n      }\n\n      static associate({Tag}) {\n        this.hasMany(Tag);\n      }\n\n    }\n    class Tag extends Model {\n\n      static get attributes() {\n        return {\n          value: {\n            type: Types.STRING,\n            allowNull: false,\n          },\n        };\n      }\n\n      static associate({Content}) {\n        this.belongsTo(Content);\n      }\n\n    }\n    return {\n      Content,\n      Tag,\n    };\n  },\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:"This time our line in the logs looks like:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"  @flecks/core/flecks updating gathered @flecks/db.models from @db-test/content with [ 'Content', 'Tag' ] +5ms\n"})}),"\n",(0,s.jsx)(n.admonition,{title:"Ess-Cue-Ell-ize",type:"tip",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"@flecks/db"})," uses ",(0,s.jsx)(n.a,{href:"https://sequelize.org/",children:"Sequelize"})," under the hood. You can dive into\n",(0,s.jsx)(n.a,{href:"https://sequelize.org/docs/v6/getting-started/",children:"their documentation"})," to learn even more."]})}),"\n",(0,s.jsxs)(n.h2,{id:"providing-models-with-flecksprovide",children:["Providing models with ",(0,s.jsx)(n.code,{children:"Flecks.provide()"})]}),"\n",(0,s.jsxs)(n.p,{children:["When building Real\u2122 applications we are usually going to need a bunch of models. If we add all\nof them into that one single file, things are going to start getting unwieldy. Let's create a\n",(0,s.jsx)(n.code,{children:"src/models"})," directory in our ",(0,s.jsx)(n.code,{children:"packages/content"})," fleck and add a ",(0,s.jsx)(n.code,{children:"content.js"})," and ",(0,s.jsx)(n.code,{children:"tag.js"})," source\nfiles with the following code:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",metastring:'title="packages/content/src/models/content.js"',children:"export default (flecks) => {\n  const {Model, Types} = flecks.fleck('@flecks/db/server');\n  return class Content extends Model {\n\n    static get attributes() {\n      return {\n        text: {\n          type: Types.TEXT,\n          allowNull: false,\n        },\n      };\n    }\n\n    static associate({Tag}) {\n      this.hasMany(Tag);\n    }\n\n  };\n};\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",metastring:'title="packages/content/src/models/tag.js"',children:"export default (flecks) => {\n  const {Model, Types} = flecks.fleck('@flecks/db/server');\n  return class Tag extends Model {\n\n    static get attributes() {\n      return {\n        value: {\n          type: Types.STRING,\n          allowNull: false,\n        },\n      };\n    }\n\n    static associate({Content}) {\n      this.belongsTo(Content);\n    }\n\n  };\n\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:"Notice that this looks very similar to how we defined the models above, but this time we're only\nreturning the classes."}),"\n",(0,s.jsxs)(n.p,{children:["Now, hop over to ",(0,s.jsx)(n.code,{children:"packages/content/src/index.js"})," and let's rewrite the hook implementation:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",metastring:'title="packages/content/src/index.js"',children:"import {Flecks} from '@flecks/core';\n\nexport const hooks = {\n  '@flecks/db.models': Flecks.provide(require.context('./models')),\n};\n"})}),"\n",(0,s.jsxs)(n.admonition,{title:"This kills the webpack",type:"warning",children:[(0,s.jsxs)(n.p,{children:["If your application has been running and smoothly updating with all the changes, it will be killed\nonce you add that ",(0,s.jsx)(n.code,{children:"require.context"})," line when it tries to reload. This is a limitation of webpack."]}),(0,s.jsx)(n.p,{children:"You'll need to restart your application. When webpack errors out, flecks will not automatically\nrestart your application to prevent an infinite failure loop."})]}),"\n",(0,s.jsxs)(n.p,{children:["We're passing the path to our models directory to ",(0,s.jsx)(n.code,{children:"require.context"})," which is then passed to\n",(0,s.jsx)(n.code,{children:"Flecks.provide"}),". This is completely equivalent to our original code, but now we can add more\nmodels by adding individual files in ",(0,s.jsx)(n.code,{children:"packages/content/src/models"})," and keep things tidy."]}),"\n",(0,s.jsx)(n.admonition,{title:"Continue gathering knowledge",type:"info",children:(0,s.jsxs)(n.p,{children:["For a more detailed treatment of gathering and providing in flecks, see\n",(0,s.jsx)(n.a,{href:"./gathering",children:"the gathering guide"}),"."]})}),"\n",(0,s.jsx)(n.h2,{id:"working-with-models",children:"Working with models"}),"\n",(0,s.jsxs)(n.p,{children:["Let's do something with them. Edit ",(0,s.jsx)(n.code,{children:"packages/content/src/index.js"})," again like\nso:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",metastring:'title="packages/content/src/index.js"',children:"import {Flecks} from '@flecks/core';\n\nexport const hooks = {\n  // highlight-start\n  '@flecks/server.up': Flecks.priority(\n    async (flecks) => {\n      const {Content, Tag} = flecks.db.Models;\n      console.log(\n        'There were',\n        await Content.count(),\n        'pieces of content',\n        'and',\n        await Tag.count(),\n        'tags.',\n      );\n    },\n    {after: '@flecks/db/server'},\n  ),\n  // highlight-end\n  '@flecks/db.models': Flecks.provide(require.context('./models')),\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["We use ",(0,s.jsx)(n.a,{href:"./ordering#fleckspriority",children:(0,s.jsx)(n.code,{children:"Flecks.priority"})})," so that the database comes up before we try to use it."]}),"\n",(0,s.jsx)(n.p,{children:"You will find this line in the output:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"There were 0 pieces of content and 0 tags.\n"})}),"\n",(0,s.jsx)(n.p,{children:"Not very interesting. Let's add some, but only if there aren't any yet:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",metastring:'title="packages/content/src/index.js"',children:"import {Flecks} from '@flecks/core';\n\nexport const hooks = {\n  '@flecks/server.up': async (flecks) => {\n    const {Content, Tag} = flecks.db.Models;\n    console.log(\n      'There were',\n      await Content.count(),\n      'pieces of content',\n      'and',\n      await Tag.count(),\n      'tags.',\n    );\n    // highlight-start\n    if (0 === await Content.count()) {\n      await Content.create(\n        {text: 'lorem ipsum', Tags: [{value: 'cool'}, {value: 'trending'}]},\n        {include: [Tag]},\n      );\n      await Content.create(\n        {text: 'blah blah', Tags: [{value: 'awesome'}]},\n        {include: [Tag]},\n      );\n    }\n    console.log(\n      'There are',\n      await Content.count(),\n      'pieces of content',\n      'and',\n      await Tag.count(),\n      'tags.',\n    );\n    // highlight-end\n  },\n  '@flecks/db.models': Flecks.provide(require.context('./models')),\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:"You will see:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"There were 0 pieces of content and 0 tags.\nThere are 2 pieces of content and 3 tags.\n"})}),"\n",(0,s.jsx)(n.p,{children:"Great!"}),"\n",(0,s.jsx)(n.h2,{id:"persistence",children:"Persistence"}),"\n",(0,s.jsx)(n.p,{children:"You'll might that if you stop the server and start it again, it will always say:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"There were 0 pieces of content and 0 tags.\nThere are 2 pieces of content and 3 tags.\n"})}),"\n",(0,s.jsx)(n.p,{children:"What's up with that? Remember in the beginning:"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["By default, flecks will connect to an ",(0,s.jsx)(n.strong,{children:"in-memory"})," SQLite database to get you started instantly."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["This means that the database will only persist as long as the life of your application. When you\nrestart it, you'll get a fresh new database every time. It was ",(0,s.jsx)(n.strong,{children:"quick to get started"})," developing,\nbut this isn't very helpful for any real purpose. Let's make a change to our ",(0,s.jsx)(n.code,{children:"build/flecks.yml"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yml",metastring:'title="build/flecks.yml"',children:"'@db-test/content:./packages/content': {}\n'@flecks/build': {}\n'@flecks/core':\n  id: db-test\n// highlight-start\n'@flecks/db':\n  database: './persistent.sql'\n// highlight-end\n'@flecks/server': {}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Kill and restart your application and you'll see our old familiar message:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"There were 0 pieces of content and 0 tags.\nThere are 2 pieces of content and 3 tags.\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This time though, our application wrote the SQLite database to disk at ",(0,s.jsx)(n.code,{children:"./persistent.sql"}),". If we\ngive it one more go, we'll finally see what we expect:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"There were 2 pieces of content and 3 tags.\nThere are 2 pieces of content and 3 tags.\n"})}),"\n",(0,s.jsx)(n.p,{children:"A persistent database!"}),"\n",(0,s.jsx)(n.h2,{id:"containerization",children:"Containerization"}),"\n",(0,s.jsxs)(n.p,{children:["Sure, our database is persistent... kinda. That ",(0,s.jsx)(n.code,{children:"persistent.sql"})," file is a bit of a kludge and\nisn't much of a long-term (or production) solution."]}),"\n",(0,s.jsxs)(n.p,{children:["flecks's small-core philosophy means that you don't pay for spinning up a database by default.\nHowever, it's trivial to accomplish a ",(0,s.jsx)(n.em,{children:'"real"'})," database connection if you have Docker installed\non your machine."]}),"\n",(0,s.jsx)(n.p,{children:"Let's add another fleck to our project:"}),"\n",(0,s.jsx)(l.Z,{cmd:"flecks add -d @flecks/docker"}),"\n",(0,s.jsxs)(n.p,{children:["Configure ",(0,s.jsx)(n.code,{children:"build/flecks.yml"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yml",metastring:'title="build/flecks.yml"',children:"'@db-test/content:./packages/content': {}\n'@flecks/build': {}\n'@flecks/core':\n  id: db-test\n// highlight-start\n'@flecks/db':\n  database: db\n  dialect: postgres\n  password: THIS_PASSWORD_IS_UNSAFE\n  username: postgres\n// highlight-end\n'@flecks/docker': {}\n'@flecks/server': {}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Add ",(0,s.jsx)(n.code,{children:"pg"})," to connect to postgres:"]}),"\n",(0,s.jsx)(i.Z,{headless:!0,pkg:"pg"}),"\n",(0,s.jsx)(n.p,{children:"Now,"}),"\n",(0,s.jsx)(n.p,{children:"Start your application and you will see some new lines in the logs:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"  @flecks/docker/container creating datadir '/tmp/flecks/flecks/docker/sequelize' +0ms\n  @flecks/docker/container launching: docker run --name flecks_sequelize -d --rm -p 5432:5432 -e POSTGRES_USER=... -e POSTGRES_DB=... -e POSTGRES_PASSWORD=... -v /tmp/flecks/flecks/docker/sequelize:/var/lib/postgresql/data postgres +0ms\n  @flecks/docker/container 'sequelize' started +372ms\n  @flecks/db/server/connection config: { database: 'db', dialect: 'postgres', host: undefined, password: '*** REDACTED ***', port: undefined, username: 'postgres' } +0ms\n  @flecks/db/server/connection synchronizing... +2s\n  @flecks/db/server/connection synchronized +3ms\n"})}),"\n",(0,s.jsx)(n.p,{children:"and of course, we see:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"There were 0 tags.\nThere are 2 tags.\n"})}),"\n",(0,s.jsx)(n.p,{children:"because we just created a new postgres database from scratch just then! Kill the application and\nrestart and you will see what you expect:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"There were 2 tags.\nThere are 2 tags.\n"})}),"\n",(0,s.jsx)(n.p,{children:"Awesome, we have a connection to a real postgres database!"}),"\n",(0,s.jsx)(n.h2,{id:"production",children:"Production"}),"\n",(0,s.jsx)(n.p,{children:"Sure, spinning up a database like magic is spiffy for development, but you probably want to be a\nlittle less freewheeling on your production server."}),"\n",(0,s.jsx)(n.p,{children:"Build the application we've written so far:"}),"\n",(0,s.jsx)(o.Z,{headless:!0,cmd:"build"}),"\n",(0,s.jsxs)(n.p,{children:["Then, take a look in the ",(0,s.jsx)(n.code,{children:"dist/server"})," directory. You'll see a file there called\n",(0,s.jsx)(n.code,{children:"docker-compose.yml"}),". ",(0,s.jsx)(n.code,{children:"@flecks/docker"})," automatically emits this file when you build your\napplication for production to make container orchestration easier. Let's take a look:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yml",metastring:'title="dist/server/docker-compose.yml"',children:"version: '3'\nservices:\n  db-test_app:\n    build:\n      context: ../..\n      dockerfile: dist/server/Dockerfile\n    environment:\n      FLECKS_ENV__flecks_docker__enabled: 'false'\n      // highlight-next-line\n      FLECKS_ENV__flecks_db__host: sequelize\n    volumes:\n      - ../../node_modules:/var/www/node_modules\n  // highlight-start\n  sequelize:\n    image: postgres\n    environment:\n      POSTGRES_USER: postgres\n      POSTGRES_DB: db\n      POSTGRES_PASSWORD: THIS_PASSWORD_IS_UNSAFE\n  // highlight-end\n"})}),"\n",(0,s.jsx)(n.p,{children:"Notice our database container is included and already prepopulated with the configuration we\nspecified!"}),"\n",(0,s.jsxs)(n.p,{children:["You can run (after you ",(0,s.jsx)(n.a,{href:"https://docs.docker.com/compose/install/",children:"install Docker Compose"})," if\nnecessary):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"docker-compose -f dist/server/docker-compose.yml up\n"})}),"\n",(0,s.jsx)(n.p,{children:"This demonstrates that your application is now being orchestrated by Docker Compose and is\nchugging right along!"})]})}function f(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(g,{...e})}):g(e)}},3200:(e,n,t)=>{t.d(n,{Z:()=>i});var s=t(9286),a=t(4866),r=t(5162),l=t(5893);function i(e){let{children:n,headless:t=!0,pkg:i,type:o}=e;return(0,l.jsx)(a.Z,{className:t&&"headless",groupId:"package-manager",children:(0,l.jsxs)(r.Z,{value:"npm",label:"npm",children:[n,(0,l.jsx)(s.Z,{language:"bash",children:"fleck"===o?`npm init @flecks/${o} -w ${i}`:`npm init @flecks/${o} ${i}`})]})})}},4283:(e,n,t)=>{t.d(n,{Z:()=>i});var s=t(9286),a=t(4866),r=t(5162),l=t(5893);function i(e){let{children:n,cmd:t,headless:i=!0}=e;const o=Array.isArray(t)?t:[t];return(0,l.jsx)(a.Z,{className:i&&"headless",groupId:"package-manager",children:(0,l.jsxs)(r.Z,{value:"npm",label:"npm",children:[n,(0,l.jsx)(s.Z,{language:"bash",children:(c="npx",o.map((e=>`${c} ${e}`)).join("\n"))})]})});var c}},385:(e,n,t)=>{t.d(n,{Z:()=>i});var s=t(9286),a=t(4866),r=t(5162),l=t(5893);function i(e){let{children:n,headless:t=!0,pkg:i}=e;return(0,l.jsx)(a.Z,{className:t&&"headless",groupId:"package-manager",children:(0,l.jsxs)(r.Z,{value:"npm",label:"npm",children:[n,(0,l.jsxs)(s.Z,{language:"bash",children:["npm install ",i]})]})})}},6569:(e,n,t)=>{t.d(n,{Z:()=>i});var s=t(9286),a=t(4866),r=t(5162),l=t(5893);function i(e){let{children:n,cmd:t,headless:i=!0}=e;return(0,l.jsx)(a.Z,{className:i&&"headless",groupId:"package-manager",children:(0,l.jsxs)(r.Z,{value:"npm",label:"npm",children:[n,(0,l.jsxs)(s.Z,{language:"bash",children:["npm run ",t]})]})})}},5162:(e,n,t)=>{t.d(n,{Z:()=>l});t(7294);var s=t(512);const a={tabItem:"tabItem_Ymn6"};var r=t(5893);function l(e){let{children:n,hidden:t,className:l}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,s.Z)(a.tabItem,l),hidden:t,children:n})}},4866:(e,n,t)=>{t.d(n,{Z:()=>y});var s=t(7294),a=t(512),r=t(2466),l=t(6550),i=t(469),o=t(1980),c=t(7392),d=t(12);function h(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:t}=e;return(0,s.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:t,attributes:s,default:a}}=e;return{value:n,label:t,attributes:s,default:a}}))}(t);return function(e){const n=(0,c.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function g(e){let{queryString:n=!1,groupId:t}=e;const a=(0,l.k6)(),r=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,o._X)(r),(0,s.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(a.location.search);n.set(r,e),a.replace({...a.location,search:n.toString()})}),[r,a])]}function f(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,r=u(e),[l,o]=(0,s.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const s=t.find((e=>e.default))??t[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:n,tabValues:r}))),[c,h]=g({queryString:t,groupId:a}),[f,m]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,r]=(0,d.Nk)(t);return[a,(0,s.useCallback)((e=>{t&&r.set(e)}),[t,r])]}({groupId:a}),k=(()=>{const e=c??f;return p({value:e,tabValues:r})?e:null})();(0,i.Z)((()=>{k&&o(k)}),[k]);return{selectedValue:l,selectValue:(0,s.useCallback)((e=>{if(!p({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);o(e),h(e),m(e)}),[h,m,r]),tabValues:r}}var m=t(2389);const k={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=t(5893);function j(e){let{className:n,block:t,selectedValue:s,selectValue:l,tabValues:i}=e;const o=[],{blockElementScrollPositionUntilNextRender:c}=(0,r.o5)(),d=e=>{const n=e.currentTarget,t=o.indexOf(n),a=i[t].value;a!==s&&(c(n),l(a))},h=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=o.indexOf(e.currentTarget)+1;n=o[t]??o[0];break}case"ArrowLeft":{const t=o.indexOf(e.currentTarget)-1;n=o[t]??o[o.length-1];break}}n?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":t},n),children:i.map((e=>{let{value:n,label:t,attributes:r}=e;return(0,x.jsx)("li",{role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,ref:e=>o.push(e),onKeyDown:h,onClick:d,...r,className:(0,a.Z)("tabs__item",k.tabItem,r?.className,{"tabs__item--active":s===n}),children:t??n},n)}))})}function b(e){let{lazy:n,children:t,selectedValue:a}=e;const r=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===a));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:r.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==a})))})}function v(e){const n=f(e);return(0,x.jsxs)("div",{className:(0,a.Z)("tabs-container",k.tabList),children:[(0,x.jsx)(j,{...e,...n}),(0,x.jsx)(b,{...e,...n})]})}function y(e){const n=(0,m.Z)();return(0,x.jsx)(v,{...e,children:h(e.children)},String(n))}}}]);